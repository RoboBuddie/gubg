Requirements for GenericBuild
=============================

# Tree #
 * The tree to be compiled is defined as the complete directory structure where the "root.tree" file is found.
 * A tree can refer to other trees:
    * Compilation flags and settings are taken from its own root.tree
    * Object and header files are accessible across different trees
 * The name of the tree is the name of the leaf directory name where the root.tree is found. E.g., if root.tree is found in /home/gfannes/gugbg/, the name of the tree is "gubg".

# Compilation #
 * Only compile files that changed.
 * A file is considered to be changed:
    * The content of the file changed. It can be assumed that is timestamp and size did not change, the content did not change either.
    * The compilation settings changed
    * Any of its dependent files changed
 * Do not litter the tree with object files

# Building #
 * If a "lib" subdirectory is present at the location of root.tree, all non-test and non-app object files are archived into a library with the name of the tree.
 * If a "include" subdirectory is present at the location of root.tree, all non-test and non-app object files are copied into this "include" directory
 * All source files inside a subdirectory named "app" are considered applications.
 * All source files inside a subdirectory named "test" are considered system tests, and should return 0 on success.

# Unit testing #
 * A source file can contain unit tests, which are only enabled with a special macro or version definition, depending on the language used:
    * C++: The macro "UNIT_TEST" is defined
    * D: The version UnitTest is set
    * Ruby: __FILE__ == $0

# Source code management #
 * For easy cooperation with git, root.tree can specify:
    * Which repository to be used for pushing, doing a "commit -a" beforehand.
    * Which repository and branch to be used for pulling. Before doing so, check that all local changed are commited.
    * Support for "commit -a" and "add"
